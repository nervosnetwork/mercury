import blockchain;

vector ScriptVec <Script>;
option ScriptVecOpt (ScriptVec);

table XudtWitnessInput {
    raw_extension_data: ScriptVecOpt,
    extension_data: BytesVec,
}

struct RCRule {
  smt_root: Byte32,
  flags: byte,
}

vector RCCellVec <Byte32>;

union RCData {
  RCRule,
  RCCellVec,
}

/* To support multiple RCRules, need to store multiple proofs in every item
in "Bytes structure" in witness.

Which means, one item in "structure" XudtWitnessInput might be SmtProofVec
*/
vector SmtProof <byte>;
vector SmtProofVec <SmtProof>;

/*
High 4 bits of values : old_value
Low 4 bits of values: new_value
The can be either 0(SMT_VALUE_NOT_EXISTING) or 1(SMT_VALUE_EXISTING).
Other values like 2, 3, .. 0xF is not allowed.
*/
struct SmtUpdateItem {
    key:       Byte32,
    values:    byte,
}

vector SmtUpdateVec <SmtUpdateItem>;

/* Update white/black list SMT */
table SmtUpdate {
    update: SmtUpdateVec,
    proof:  SmtProof,
}

table XudtData {
  lock: Bytes,
  data: BytesVec,
}
